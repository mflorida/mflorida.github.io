{"version":3,"sources":["_helpers/useRequest.js","LoadingRequest.js","CustomerList.js","App.js","serviceWorker.js","index.js"],"names":["useRequest","opts","toWatch","useState","response","setResponse","request","setRequest","useEffect","url","req","axios","then","resp","doRequest","concat","LoadingRequest","props","status","test","className","style","maxWidth","statusText","type","role","text","sumAmounts","input","reduce","prev","curr","popCount","DetailsLink","amounts","counter","Array","spent","length","fill","popId","detailsPopover","Popover","id","Content","padding","Table","striped","bordered","hover","size","margin","map","item","i","rewards","OverlayTrigger","rootClose","trigger","placement","overlay","href","children","CustomerTableHeader","count","x","colSpan","CustomerRow","customer","customerTotals","totals","monthlyTotals","mo","spentx","rewardsx","textAlign","paddingLeft","firstName","lastName","CustomerTable","monthCount","data","variant","idx","key","CustomerList","method","App","Container","Row","borderBottom","paddingTop","Col","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+VASO,SAASA,EAAWC,EAAMC,GAAQ,MAILC,mBAAS,MAJJ,mBAI9BC,EAJ8B,KAIpBC,EAJoB,OAKPF,mBAAS,MALF,mBAK9BG,EAL8B,KAKrBC,EALqB,KA8BrC,OAJAC,qBAAU,YAnBQ,WAEd,GAAIP,EAAKQ,IAAK,CAEV,IAAMC,EAAMC,IAAMV,GAElBM,EAAWG,GAEXA,EAAIE,MAAK,SAACC,GAIN,OAHAR,EAAYQ,GAGLA,MAQfC,KACDZ,EAAU,GAAGa,OAAOb,GAAW,IAE3B,CAACE,EAAUE,GC/BP,SAASU,EAAeC,GACnC,OAAIA,EAAMP,KAAOO,EAAMP,IAAIQ,SAAW,KAAKC,KAAKF,EAAMP,IAAIQ,QAElD,yBAAKE,UAAU,iCAAiCC,MAAO,CAAEC,SAAU,UAC/D,yBAAKF,UAAU,eAAf,oBACA,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAd,UAAmCH,EAAMP,IAAIQ,QAC7C,uBAAGE,UAAU,aACRH,EAAMP,IAAIa,cAQvB,yBAAKH,UAAS,0BAAqBH,EAAMO,KAAOP,EAAMO,KAAO,cAAgBC,KAAK,UAC9E,0BAAML,UAAU,WAAWH,EAAMS,MAAQ,eCnBzD,SAASC,EAAWC,GAChB,OAAOA,EAAMC,QAAO,SAACC,EAAMC,GAAP,OAAiBD,EAAOC,KAGhD,IAAIC,EAAW,EAEf,SAASC,EAAYhB,GAAO,IAEhBiB,EAAYjB,EAAZiB,QAEFC,EAAW,IAAIC,MAAMF,EAAQG,MAAMC,QAASC,KAAK,IAEjDC,EAAQ,OAASR,GAAY,GAE7BS,EACF,kBAACC,EAAA,EAAD,CAASC,GAAIH,GAET,kBAACE,EAAA,EAAQE,QAAT,CAAiBvB,MAAO,CAAEwB,QAAS,UAC/B,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,KAAK7B,MAAO,CAAE8B,OAAQ,IACrD,+BACA,4BACI,qCACA,wCAGJ,+BACChB,EAAQiB,KAAI,SAASC,EAAMC,GACxB,OACI,4BACI,gCAAMpB,EAAQG,MAAMiB,IACpB,4BAAKpB,EAAQqB,QAAQD,YAUjD,OACQ,kBAACE,EAAA,EAAD,CAAgBC,WAAW,EAAMC,QAAQ,QAAQC,UAAU,QAAQC,QAASnB,GACxE,uBAAGoB,KAAK,MAAM5C,EAAM6C,WAMpC,SAASC,EAAoB9C,GACzB,OAAO,+BACP,4BACI,6CACE,IAAImB,MAAMnB,EAAM+C,OAAQzB,KAAK,IAAIa,KAAI,SAACa,EAAGX,GAAJ,OACnC,wBAAIY,QAAS,GAAb,SAAuBZ,EAAI,MAE/B,2CACA,8CAKR,SAASa,EAAYlD,GAEWA,EAApB+C,MAFgB,IAETI,EAAanD,EAAbmD,SAETlC,EAAUkC,EAASlC,QAEnBmC,EAAiB,CACnBhC,MAAOH,EAAQkB,KAAI,SAACC,EAAMC,GACtB,OAAOD,EAAKiB,OAAOjC,SACpBR,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,KACjCwB,QAASrB,EAAQkB,KAAI,SAACC,EAAMC,GACxB,OAAOD,EAAKiB,OAAOf,WACpB1B,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,MAG/BwC,EAAgBrC,EAAQkB,KAAI,SAASoB,EAAIlB,GAC3C,MAAO,CACHmB,OAAQD,EAAGnC,MAAMR,QAAO,SAASC,EAAMC,GACnC,OAAOD,EAAOC,KAElBM,MAAOV,EAAW6C,EAAGnC,OACrBqC,SAAUF,EAAGjB,QAAQ1B,QAAO,SAASC,EAAMC,GACvC,OAAOD,EAAOC,KAElBwB,QAAS5B,EAAW6C,EAAGjB,aAI/B,OAAO,4BACH,wBAAIlC,MAAO,CAAEsD,UAAW,OAAQC,YAAa,SAA7C,UAA2DR,EAASS,UAApE,YAAiFT,EAASU,WACzFP,EAAcnB,KAAI,SAACC,EAAMC,GAAP,OACf,oCACI,gCAAMD,EAAKhB,OACX,4BAAKgB,EAAKE,QAAV,QACA,4BAAI,kBAACtB,EAAD,CAAaC,QAASA,EAAQoB,IAA9B,aAGZ,gCAAMe,EAAehC,OACrB,4BAAKgC,EAAed,UAI5B,SAASwB,EAAc9D,GAEnB,IAAM+D,EAAa/D,EAAMgE,KAAK,GAAG/C,QAAQI,OACzC,OAAO,kBAACQ,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,KAAKgC,QAAS,QACpD,kBAACnB,EAAD,CAAqBC,MAAOgB,IAC5B,+BACC/D,EAAMgE,KAAK7B,KAAI,SAACC,EAAM8B,GAAP,OACZ,kBAAChB,EAAD,CAAaiB,IAAKD,EAAKnB,MAAOgB,EAAYZ,SAAUf,SAOjD,SAASgC,IAAe,IAAD,EAENrF,EAAW,CAC/BS,IAAK,yBACL6E,OAAQ,QAJkB,mBAE3BlF,EAF2B,UAQlC,OAAO,oCACDA,GAAaA,EAAS6E,KAGpB,kBAACF,EAAD,CAAeE,KAAM7E,EAAS6E,OAF9B,kBAACjE,EAAD,OC1GGuE,MAtBf,WACE,OACE,yBAAKnE,UAAU,OAEX,kBAACoE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKpE,MAAO,CAAEqE,aAAc,mBACxB,wBAAIrE,MAAO,CAAE8B,OAAQ,cAArB,0BAEJ,kBAACsC,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,CAAKpE,MAAO,CAAEsE,WAAY,SACtB,kBAACC,EAAA,EAAD,CAAKvE,MAAO,CAAEwB,QAAS,IAEnB,kBAACwC,EAAD,WCLAQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7F,MAAK,SAAA8F,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.50d0da0d.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n/**\n * Get data and use the response in a React hook\n * @param {Object} opts - axios config object string for GET request\n * @param {*} [toWatch] - optional variable to watch to trigger a new request\n * @returns {*[]}\n */\nexport function useRequest(opts, toWatch){\n\n    // console.log('useRequest');\n\n    const [response, setResponse] = useState(null);\n    const [request, setRequest] = useState(null);\n\n    const doRequest = function(){\n\n        if (opts.url) {\n\n            const req = axios(opts);\n\n            setRequest(req);\n\n            req.then((resp) => {\n                setResponse(resp);\n                // console.log('useRequest:response');\n                // console.log(resp);\n                return resp;\n            });\n\n        }\n\n    };\n\n    useEffect(() => {\n        doRequest();\n    }, toWatch ? [].concat(toWatch) : []);\n\n    return [response, request];\n\n}\n","import React from 'react';\n\n/**\n * Generic light-colored spinner\n * @param props\n * @returns {*}\n * @constructor\n */\nexport default function LoadingRequest(props){\n    if (props.req && props.req.status && !/^2/.test(props.req.status)) {\n        return (\n            <div className=\"card text-white bg-danger mb-3\" style={{ maxWidth: '24rem' }}>\n                <div className=\"card-header\">An Error Occured</div>\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">Status {props.req.status}</h5>\n                    <p className=\"card-text\">\n                        {props.req.statusText}\n                    </p>\n                </div>\n            </div>\n        )\n    }\n    else {\n        return (\n            <div className={`spinner-boarder ${props.type ? props.type : 'text-light'}`} role=\"status\">\n                <span className=\"sr-only\">{props.text || 'Loading...'}</span>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport { Table, Popover, OverlayTrigger } from 'react-bootstrap';\nimport { useRequest } from './_helpers/useRequest';\nimport LoadingRequest from './LoadingRequest';\n\n// helper for easier adding up amounts in array\nfunction sumAmounts(input){\n    return input.reduce((prev, curr) => (prev + curr));\n}\n\nlet popCount = 0;\n\nfunction DetailsLink(props){\n\n    const { amounts } = props;\n\n    const counter = (new Array(amounts.spent.length)).fill('');\n\n    const popId = 'pop' + (popCount += 1);\n\n    const detailsPopover = (\n        <Popover id={popId}>\n            {/*<Popover.Title>Details</Popover.Title>*/}\n            <Popover.Content style={{ padding: '.5rem' }}>\n                <Table striped bordered hover size=\"sm\" style={{ margin: 0 }}>\n                    <thead>\n                    <tr>\n                        <th>Spent</th>\n                        <th>Points</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {counter.map(function(item, i){\n                        return (\n                            <tr>\n                                <td>${amounts.spent[i]}</td>\n                                <td>{amounts.rewards[i]}</td>\n                            </tr>\n                        )\n                    })}\n                    </tbody>\n                </Table>\n            </Popover.Content>\n        </Popover>\n    )\n\n    return (\n            <OverlayTrigger rootClose={true} trigger=\"click\" placement=\"right\" overlay={detailsPopover}>\n                <a href=\"#!\">{props.children}</a>\n            </OverlayTrigger>\n    )\n\n}\n\nfunction CustomerTableHeader(props){\n    return <thead>\n    <tr>\n        <th>Customer Name</th>\n        {(new Array(props.count)).fill('').map((x, i) => (\n            <th colSpan={3}>Month {i + 1}</th>\n        ))}\n        <th>Total Spent</th>\n        <th>Total Points</th>\n    </tr>\n    </thead>\n}\n\nfunction CustomerRow(props){\n\n    const { count, customer } = props;\n\n    const amounts = customer.amounts;\n\n    const customerTotals = {\n        spent: amounts.map((item, i) => {\n            return item.totals.spent\n        }).reduce((prev, curr) => prev + curr),\n        rewards: amounts.map((item, i) => {\n            return item.totals.rewards\n        }).reduce((prev, curr) => prev + curr)\n    }\n\n    const monthlyTotals = amounts.map(function(mo, i){\n        return {\n            spentx: mo.spent.reduce(function(prev, curr){\n                return prev + curr\n            }),\n            spent: sumAmounts(mo.spent),\n            rewardsx: mo.rewards.reduce(function(prev, curr){\n                return prev + curr\n            }),\n            rewards: sumAmounts(mo.rewards)\n        }\n    })\n\n    return <tr>\n        <td style={{ textAlign: 'left', paddingLeft: '10px' }}>{`${customer.firstName} ${customer.lastName}`}</td>\n        {monthlyTotals.map((item, i) => (\n            <>\n                <td>${item.spent}</td>\n                <td>{item.rewards} pts</td>\n                <td><DetailsLink amounts={amounts[i]}>info</DetailsLink></td>\n            </>\n        ))}\n        <td>${customerTotals.spent}</td>\n        <td>{customerTotals.rewards}</td>\n    </tr>\n}\n\nfunction CustomerTable(props){\n    {/* look at the first item to determine number of month header rows */}\n    const monthCount = props.data[0].amounts.length;\n    return <Table striped bordered hover size=\"sm\" variant={'dark'}>\n        <CustomerTableHeader count={monthCount}/>\n        <tbody>\n        {props.data.map((item, idx) => (\n            <CustomerRow key={idx} count={monthCount} customer={item}/>\n        ))}\n        </tbody>\n    </Table>\n\n}\n\nexport default function CustomerList(){\n\n    const [response, request] = useRequest({\n            url: 'data/customerData.json',\n            method: 'GET'\n        }\n    );\n\n    return <>\n        {!response || !response.data ? (\n            <LoadingRequest/>\n        ) : (\n            <CustomerTable data={response.data}/>\n        )}\n    </>\n\n}\n","import React from 'react';\nimport './App.css';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport CustomerList from './CustomerList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n        <Container>\n            <Row style={{ borderBottom: '1px solid #ccc' }}>\n                <h2 style={{ margin: '20px auto' }}>Customer Rewards Data</h2>\n            </Row>\n            <Row/>\n            <Row style={{ paddingTop: '20px' }}>\n                <Col style={{ padding: 0 }}>\n\n                    <CustomerList/>\n\n                </Col>\n            </Row>\n        </Container>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}